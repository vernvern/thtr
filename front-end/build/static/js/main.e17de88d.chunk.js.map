{"version":3,"sources":["Views/logo.svg","serviceWorker.js","history.js","Views/Home.js","Views/Login.js","Views/App.js","route.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","createBrowserHistory","Home","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","Login","Register","_Component2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","App","Route","exact","path","component","AppRouter","Router","history","Switch","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uJCUpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+GCbSC,oECyBAC,0LArBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,YAAYG,IAAI,SAC1CN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,2BADP,4BAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,YACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wBATSC,cCFbC,mLAEF,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAlB,iBALYO,aAYPE,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEI,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,kCALRU,EAAA,CAA8BF,aAafC,ICPAc,mLAZX,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWjB,IACzCZ,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,aAPzBW,aCSHoB,EAPb9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAQC,QAASA,GACfhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWlB,IAChCX,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOE,KAAK,IAAIC,UAAWJ,MCLjCS,IAASC,OACPL,EACAM,SAASC,eAAe,SNgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e17de88d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport '../Css/Home.css';\n\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <header className=\"Home-header\">\n          <img src={logo} className=\"Home-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/Home.js</code> and save to reload.test\n          </p>\n          <a\n            className=\"Home-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n\n\nclass Login extends Component {\n  render() {\n    return (\n      <div className=\"Login\">\n        <a> Login test </a>\n        <button className=\"btn-large\">Large</button>\n      </div>\n    );\n  }\n}\n\n\nexport class Register extends Component {\n  render() {\n    return (\n      <div className=\"Register\">\n        <header className=\"Home-header\">\n        <a> Register test </a>\n        </header>\n      </div>\n    );\n  }\n}\n\n\nexport default Login;\n\n","import React, { Component } from 'react';\nimport { Route } from 'react-router';\n\nimport Home from './Home';\nimport { Register } from './Login';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='Nav'/>\n        <div className='Main'>\n          <Route exact path='/register' component={Register} />\n          <Route exact path='/' component={Home} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router';\n\nimport history from './history';\nimport App from './Views/App';\nimport Login from './Views/Login';\n\n\nlet AppRouter =\n  <Router history={history}>\n    <Switch>\n      <Route path='/login' component={Login} />\n      <Route path='/' component={App} />\n    </Switch>\n  </Router>;\n\nexport default AppRouter;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport AppRouter from './route'\n\n\nReactDOM.render(\n  AppRouter,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}