{"version":3,"sources":["Images/logo.svg","serviceWorker.js","Views/Home.js","Views/Register.js","Views/Nav.js","Views/App.js","Views/Login.js","Components/client.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","Home","react_default","a","createElement","className","src","logo","alt","href","target","rel","type","value","Component","REGISTER_MUTATION","gql","_templateObject","Register","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nickName","email","password1","password2","code","nickNameChange","bind","assertThisInitialized","emailChange","password1Change","password2Change","descriptionChange","setCode","inherits","createClass","key","event","setState","description","_this2","msg","react_apollo_browser_umd","mutation","onCompleted","data","console","info","registerUser","history","push","register","_ref","onSubmit","e","preventDefault","input_data","password","variables","htmlFor","placeholder","id","onChange","valu","Nav","navBrandList","Link","to","map","object","i","navRightList","name","App","Views_Nav","es_Route","exact","path","component","render","localStorage","getItem","Views_Home","Redirect","LOGIN_QUERY","Login_templateObject","Login","passwordChange","es_Redirect","style","textAlign","client","onClick","asyncToGenerator","regenerator_default","mark","_callee","_ref2","wrap","_context","prev","next","query","sent","login","setItem","accessToken","stop","color","textDecorationColor","textDecorationLine","textDecorationStyle","ApolloClient","uri","supportsHistory","ReactDOM","BrowserRouter","forceRefresh","Switch","Route","Views_Login","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5739f5a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nimport '../Css/Home.css';\n\nimport logo from '../Images/logo.svg';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <header className=\"Home-header\">\n          <img src={logo} className=\"Home-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/Home.js</code> and save to reload.test\n          </p>\n          <a\n            className=\"Home-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        <input type=\"text\" value=\"Hello!\" />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Mutation } from \"react-apollo\";\nimport gql from 'graphql-tag';\n\n\nconst REGISTER_MUTATION = gql`\n  mutation register($nickName: String, $email: String, $password: String, $description: String){\n    registerUser(email:$email, password: $password, nickName: $nickName, description: $description){\n      user{\n        email\n      }\n      code,\n      msg\n    }\n  }\n`;\n\nexport class Register extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      nickName: '',\n      email: '',\n      password1: '',\n      password2: '',\n      code: ''\n    };\n\n    this.nickNameChange = this.nickNameChange.bind(this);\n    this.emailChange = this.emailChange.bind(this);\n    this.password1Change = this.password1Change.bind(this);\n    this.password2Change = this.password2Change.bind(this);\n    this.descriptionChange = this.descriptionChange.bind(this);\n    this.setCode = this.setCode.bind(this);\n  }\n\n  nickNameChange(event){\n    this.setState({nickName: event.target.value});\n  }\n\n  emailChange(event){\n    this.setState({email: event.target.value});\n  }\n\n  password1Change(event){\n    this.setState({password1: event.target.value});\n  }\n\n  password2Change(event){\n    this.setState({password2: event.target.value});\n  }\n\n  descriptionChange(event){\n    this.setState({description: event.target.value});\n  }\n\n  setCode(code){\n    this.setState({code: code});\n  }\n\n  render() {\n\n    let msg = '';\n    switch (this.state.code){\n      case '2001': msg = '两个密码不一致'; break;\n      case '2002': msg = '请填写昵称'; break;\n      case '2003': msg = '请填写邮箱'; break;\n      case '2004': msg = '请填写密码'; break;\n      case '2005': msg = '请再次填写密码'; break;\n      case '2006': msg = '网络错误'; break;\n      case '1001': msg = '账号已存在'; break;\n      default: msg = '';\n\n    }\n\n    return (\n      <Mutation\n        mutation = { REGISTER_MUTATION }\n        onCompleted = {(data) => {\n          console.info(data);\n          if (data.registerUser.code === '0'){\n            this.props.history.push('/login');\n          }\n          this.setCode(data.registerUser.code);\n        }}\n      >\n        {(register, {data}) => (\n          <form\n            onSubmit = {e => {\n              e.preventDefault();\n              if (!this.state.nickName){\n                this.setState({code: '2002'});\n              } else if (!this.state.email){\n                this.setState({code: '2003'});\n              } else if (!this.state.password1){\n                this.setState({code: '2004'});\n              } else if (!this.state.password2){\n                this.setState({code: '2005'});\n              } else if (this.state.password1 !== this.state.password2){\n                this.setState({code: '2001'});\n              } else if (!this.state.description){\n                this.setState({code: '2006'});\n              } else {\n                const input_data = {\n                  'email': this.state.email,\n                  'password': this.state.password1,\n                  'nickName': this.state.nickName,\n                  'description': this.state.description\n                };\n                register({variables: input_data});\n              }\n            }}\n          >\n            <div className='row flex-center'>\n              <div className='sm-10 col'>\n                <h3> 注册～ </h3>\n                <div className=\"form-group\">\n                    <label htmlFor=\"nickName\">昵称</label>\n                    <input type=\"text\" placeholder=\"balabala~\" id=\"nickName\" value={this.state.nickName} onChange={this.nickNameChange} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"email\">邮箱(账号)</label>\n                    <input type=\"text\" placeholder=\"*****@**.com\" id=\"email\" value={this.state.email} onChange={this.emailChange} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"password1\">密码</label>\n                    <input type=\"password\" placeholder=\"🙈\" id=\"password1\" value={this.state.password1} onChange={this.password1Change} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"password2\">再次密码</label>\n                    <input type=\"password\" placeholder=\"(✩_✩)\" id=\"password2\" value={this.state.password2} onChange={this.password2Change} />\n                </div>\n                <div className=\"form-group\">\n                  <label>签名</label>\n                  <textarea placeholder=\"必填!\" valu={this.state.description} onChange={this.descriptionChange}></textarea>\n                </div>\n                <button type='submit'>注册</button>\n                <p className=\"text-danger\">{msg}</p>\n              </div>\n            </div>\n          </form>\n        )}\n      </Mutation>\n    );\n  }\n}\n\n\nexport default Register;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n\nclass Nav extends Component {\n  render() {\n\n    const navsBrand = [\n      <h4><Link to='/home'> Too Hard Too Remeber ! </Link></h4>,\n    ];\n    const navBrandList = navsBrand.map(function(object, i){\n      return <li key={i}>{object}</li>\n    });\n\n    const navsRight = [\n      <Link to='/page/add'> &nbsp;+&nbsp; </Link>,\n      <Link to='/about'> 我的 </Link>\n    ];\n    const navRightList = navsRight.map(function(object, i){\n      return <li key={i}>{object}</li>\n    });\n    return (\n     <nav className=\"border fixed split-nav\">\n       <div className=\"nav-brand\">\n         <ul className=\"inline\"> {navBrandList} </ul>\n       </div>\n       <div className=\"collapsible\">\n         <input id=\"collapsible2\" type=\"checkbox\" name=\"collapsible2\" />\n         <button>\n           <label htmlFor=\"collapsible2\">\n             <div className=\"bar1\"></div>\n             <div className=\"bar2\"></div>\n             <div className=\"bar3\"></div>\n           </label>\n         </button>\n         <div className=\"collapsible-body\">\n           <ul className=\"inline\"> {navRightList} </ul>\n         </div>\n       </div>\n     </nav>\n    );\n  }\n}\n\n\nexport default Nav;\n","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router';\n\nimport Home from './Home';\nimport Register from './Register';\nimport Nav from './Nav';\n\nimport '../Css/index.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"row site\">\n        <div className='sm-12 md-12 col'>\n          <div className='page'>\n\n            {/* nav */}\n            <div className='row'> <Nav /> </div>\n            <div className='row'> <br /> </div>\n\n            <div className='Main row'>\n              <div className='md-10 col'></div>\n\n              <div className='md-10 col'>\n                {/* body */}\n                <Route exact path='/register' component={Register} />\n                <Route exact path='/home'  render={(props)=>{\n                  var access_token = localStorage.getItem('access_token');\n                  if (access_token){\n                    return <Home />;\n                  } else {\n                    return <Redirect to='/login' />;\n                  }\n                }}/>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\n\n\nimport logo from '../Images/logo.svg';\n\n\nconst LOGIN_QUERY = gql`\n  query dsa($email: String, $password: String){\n    login(email: $email, password: $password){\n      accessToken,\n      code,\n      msg\n    }\n  }\n`;\n\n\nclass Login extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      code: '',\n    };\n\n    this.emailChange = this.emailChange.bind(this);\n    this.passwordChange = this.passwordChange.bind(this);\n    this.setCode = this.setCode.bind(this);\n  }\n\n  emailChange(event){\n    this.setState({email: event.target.value});\n  }\n\n  passwordChange(event){\n    this.setState({password: event.target.value});\n  }\n\n  setCode = (code) => this.setState(() => ({code}));\n\n  render() {\n    if (this.state.code === '0') {\n      return <Redirect to='/home' />\n    }\n    let msg = '';\n    switch (this.state.code){\n      case '1002': msg = '账号不存在'; break;\n      case '1003': msg = '密码错误'; break;\n      case '2001': msg = '请填写账号'; break;\n      case '2002': msg = '请填写密码'; break;\n      default: msg = '';\n    }\n\n    return (\n      <div id='login'>\n        <div className=\"row flex-center\">\n          <div className=''>\n\n            <div className=\"row\">\n              <div className='sm-12 col'>\n                <img src={logo}  alt=\"logo\" />\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <div className='sm-12 col'>\n                <p style={{ textAlign: 'center' }}> Sign in to thtr </p>\n              </div>\n            </div>\n\n            <div className=\"row flex-space child-borders\" >\n              <div className=\"sm-12 md-12 col padding-left-large\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"email\">账号</label>\n                    <input type=\"text\" className='border border-primary' placeholder=\"邮箱 | 账号\" id=\"email\" value={this.state.email} onChange={this.emailChange} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"password\">密码</label>\n                    <input type=\"text\" className='border border-primary' placeholder=\"🙈\" id=\"password\" value={this.state.password} onChange={this.passwordChange}/>\n                </div>\n\n                <div className=\"form-group\">\n                  <ApolloConsumer>\n                    {client => (\n                      <button type='submit' className='btn-block'\n                        onClick={async () => {\n                          if (!this.state.email){\n                            this.setCode('2001');\n                          } else if (!this.state.password){\n                            this.setCode('2002');\n                          } else {\n                            const { data } = await client.query({\n                              query: LOGIN_QUERY,\n                              variables: {'email': this.state.email, 'password': this.state.password}\n                            });\n                            if (data.login.code === '0'){\n                              localStorage.setItem('access_token', data.login.accessToken);\n                            }\n                            this.setCode(data.login.code);\n                          }\n                        }}\n                      >\n                        登录\n                      </button>\n                    )}\n                  </ ApolloConsumer>\n\n                  <p className=\"text-danger\">{msg}</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"row flex-space child-borders\" >\n              <div className=\"sm-12 col padding-smal\">\n                <p>没有thtr账号？<Link to='/register' style={{ color: '#0066CC', textDecorationColor:'#ffffff',textDecorationLine: \"underline\",textDecorationStyle: \"solid\" }}>注册一个</Link></p>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Login;\n\n","import ApolloClient from 'apollo-boost';\n\n\nconst client = new ApolloClient({\n  uri: 'http://192.168.56.235/graphql/graphiql'\n});\n\nexport default client;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { ApolloProvider } from \"react-apollo\";\n\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './Views/App';\nimport Login from './Views/Login';\nimport client from './Components/client';\n\n\nconst supportsHistory = 'pushState' in window.history;\n\n\nconst ApolloDecorator = () => (\n  <ApolloProvider client={client}>\n    <BrowserRouter forceRefresh={!supportsHistory}>\n      <Switch>\n        <Route path='/login' render={(props)=>{\n          return <Login />;\n        }}/>\n        <Route path='/' component={App} />\n      </Switch>\n    </BrowserRouter>\n  </ApolloProvider>\n);\n\nReactDOM.render(\n  <ApolloDecorator />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}